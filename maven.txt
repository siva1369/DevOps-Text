
What is Maven?

Maven is an open-source build automation tool developed by Apache.

Based on the Project Object Model (POM).

Manages build, dependencies, reporting, and documentation using a centralized pom.xml file.

Final output is known as an artifact (e.g., .jar, .war, .ear, .exe, .msi).

Maven is based on the concept of Project Object Model (POM), which describes the structure of a project and its dependencies. It manages project build, reporting, and documentation from a central piece of information.

Maven connects to global repositories like "search.maven.org" to download secure and updated APIs.

Open-source communities (e.g., Jenkins, Tomcat, MySQL) upload their updated APIs to this global server.

Developers download these APIs into their local Maven repository (.m2 folder).

Code is stored separately (e.g., in GitHub), while dependencies/APIs are stored in .m2, improving code security and modularity.
API vulnerability's

all the open source communities like jenkins, tomcat, mysql etc upload their updated API's into maven global server

developers connect to the maven global server ,download those API's that are necessary for the project development and they store them into maven local repository.

all developers connect to maven local repository and perform the development activity 

in this way the code is stored separately in github. the api's requires for the code development are stored in maven local repository

this will helps in protecting the source code from any threats/viruses that might be present in the API'S

maven is also a build tool. where it can compile the programs and create a artifact .

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What is an Artifact in Maven?

In Maven, an artifact is the final output of the build process. It is a packaged file (usually .jar, .war, or .ear) that contains:

Compiled source code (.class files)

Project resources (e.g., config, static files, etc.)

Dependency metadata (pom.xml)

Manifest file (for executable JARs)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


we need to install java jdk file from oracle 

where the jdk is installed path

c:\program files\java\jdk1.8.0_271

C:\Program Files\Java\jdk1.8.0_333

copy this path

this pc --> properties --> advanced system setting --> advanced tab --> environment variables --> system variable --> new


variable name = JAVA_HOME
variable value = c:\program files\java\jdk1.8.0_271,,C:\Program Files\Java\jdk1.8.0_333,


ok

path -- C:\Program Files\Java\jdk1.8.0_333\bin


download Apache maven


create new environment variable



variable name = M2_HOME

variable value = E:\apache-maven-3.8.6-bin\apache-maven-3.8.6

new path = E:\apache-maven-3.8.6-bin\apache-maven-3.8.6\bin


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


for checking maven configure or not

open CMD

mvn --version



maven number :-

You’re using the archetype plugin to create a new Maven project using predefined templates (called archetypes). Each archetype has a unique number (ID) in the interactive mode to help select the correct project type.


mvn archetype:generate (in CMD)


type of project is dependent on the above number 

1740 -- for spring project 
1797 -- for sample maven project 
1244 -- mvc 4 web application
2630 -- project for multiple platforms web , android and ios



let's select the defolt number= 1797 enter defolt number




group id :-

In Maven, the groupId is a unique identifier for your project’s organization, company, or domain. It helps categorize and organize projects, especially when you are working with multiple artifacts or modules.

this is for project structure

ex :-

for commercial application -- ex: com.<project_name>

for government application -- ex: gov.<project_name>

for organization application -- ex: org.<project_name>



define the value for group id =com.hdfc

what is artifactid : webapphdfc (with this name artifact will be created)

we get build success massage with project location

in project folder we got two files 

1. src

main -- the total code 
test --  unit test

2. pom.xml

pom - project object modal

in this will store the API's information


here open git bash and commit the directories

how to download the API's 

in the browser select our required api take dependency tag copy it

than open the pom.xml file in that file we can observe the dependency tag select that one and past it and save 

than download the API's

in cmd

> cd webapphdfc
> mvn compile

maven local repository is created with the name .m2  (this is hidden folder)

observe the project file

we have get third folder that is "target"

open git bash and commit these target folder and modified pom.xml


now we need to compile all java files 

in cmd 

> mvn compile

this will compile the files in the test file 

> mvn test

than pakage a source code of class file and genarate an artifact

> mvn package







Essential Maven Commands for DevOps Engineers:

1. mvn clean:
   - Cleans the project by deleting the `target` directory.

2. mvn compile:
   - Compiles the source code of the project.

3. mvn test:
   - Runs unit tests using a testing framework like JUnit.

4. mvn package:
   - Packages the compiled code into a distributable format, such as a JAR, WAR, or EAR file.

5. mvn install:
   - Installs the package into the local repository, making it available for other projects locally.

6. mvn deploy:
   - Copies the final package to the remote repository for sharing with other developers and projects.

7. mvn site:
   - Generates project documentation site including reports like unit test reports, code coverage, etc.

8. mvn dependency:tree:
   - Displays the dependency tree of the project, showing all dependencies and their versions.

9. mvn versions:display-dependency-updates:
   - Shows any dependencies that have newer versions available.

10. mvn release:prepare and mvn release:perform:
    - Prepares and performs a release of the project, including tagging in version control, updating POM versions, and deploying artifacts.

 

Additional Maven concepts:

- Custom Profiles: Use profiles (`-PprofileName`) to customize builds for different environments (e.g., development, testing, production).

- Dependency Management: Utilize the `pom.xml` file to manage dependencies and plugins efficiently.

- Continuous Integration: Integrate Maven with CI/CD tools like Jenkins to automate builds and deployments.



